apply plugin: 'java'
apply plugin: 'maven'
apply from: "intellij.gradle"
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'signing'

version = '0.8.4.0'
group = 'io.github.fallwizard'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE'
    }
}


repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/release'}
}

dependencies {

    ext.dropwizardVersion = '0.8.4'
    ext.springIoPlatformVersion = '1.1.2.RELEASE'

    versionManagement ("io.spring.platform:platform-versions:${ext.springIoPlatformVersion}@properties")

    // dropwizard
    compile("io.dropwizard:dropwizard-core:${ext.dropwizardVersion}")
    compile("io.dropwizard:dropwizard-auth:${ext.dropwizardVersion}")
    compile("io.dropwizard:dropwizard-configuration:${ext.dropwizardVersion}")

    // spring framework
    compile 'org.springframework:spring-core'
    compile 'org.springframework.security:spring-security-core'
    compile 'org.springframework.security:spring-security-web'
    compile 'org.springframework.security:spring-security-config'
    compile 'org.springframework:spring-beans'
    compile 'org.springframework:spring-context'

    testCompile("junit:junit:4.10")
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}


artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}


signing {
    if (project.hasProperty("signing.shouldSign")) {
        sign configurations.archives
    }
}


uploadArchives {

    repositories {
        mavenDeployer {

            // see: http://yennicktrevels.com/blog/2013/10/11/automated-gradle-project-deployment-to-sonatype-oss-repository/
            if (project.hasProperty("signing.shouldSign")) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }

            // see: https://github.com/Berico-Technologies/Fallwizard/issues/15
            // see: http://stackoverflow.com/questions/23665976/unable-to-publish-to-local-maven-repo-when-using-gradle-and-spring-boot
            pom.project {
                parent {
                    groupId 'org.springframework.boot'
                    artifactId 'spring-boot-starter-parent'
                    version '1.1.5.RELEASE'
                }
                name 'Fallwizard'
                packaging 'jar'
                description 'Allows dropwizard users to use the Spring Framework'
                url 'https://github.com/Fallwizard/Fallwizard'
                scm {
                    url 'scm:git@github.com:Fallwizard/Fallwizard.git'
                    connection 'scm:git@github.com:Fallwizard/Fallwizard.git'
                    developerConnection 'scm:git@github.com:Fallwizard/Fallwizard.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'rclayton'
                        name 'Richard Clayton'
                    }
                    developer {
                        id 'jar349'
                        name 'John Ruiz'
                    }
                }
            }
            // when we're ready to publish to Maven Central, use this repository instead
            // (make sure a project has been created for us first!)
            // see: http://central.sonatype.org/pages/ossrh-guide.html#create-a-ticket-with-sonatype
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.property("sonatypeUsername"), password: project.property("sonatypePassword"))
            }
        }
    }
}
